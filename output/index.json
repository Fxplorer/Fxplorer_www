[{"uri":"/Fxplorer_www/fsdocs_step2.html","title":"fsdocs_step2","content":"Go through the github actions and make updates\n","headings":[],"type":"content"},{"uri":"/Fxplorer_www/index.html","title":"index","content":"Hello world (index.md)\n","headings":[],"type":"content"},{"uri":"/Fxplorer_www/rant_on_getting_FSharp.Formatting_working.html","title":"The experience of getting FSharp.Formatting working!\n","content":"The experience of getting FSharp.Formatting working!\nI have tried actually several times to use FSharp.Formatting over the past 10 years of exploring F#. Never got it to a useful stage until today (2024-03-26). Been quite a frustrating experience. One would think that the tool that creates documentation would be well documented! There is plenty of information there, it is just a lot to take in when one is inexperienced in most things.\nNow that I got it working locally and in github pages with a custom domain, things should be quite a bit more smooth. Hopefully I can bring a noobie persective to the flow of the help docs and provide some PR\u0027s. I already have cleaned up a couple typos and such that tripped me up.\nAnyway, now I can spew my thoughts for all posterity. Tackling Avalonia next!\n","headings":["The experience of getting FSharp.Formatting working!"],"type":"content"},{"uri":"/Fxplorer_www/MinimumFsharpAvaloniaApp.html","title":"Single file minimum F# Avalonia UI app.\n","content":"Single file minimum F# Avalonia UI app.\nAfter some experimentation, a minimum Avalonia app that can be ran from an .fsx file or a Polyglot Notebook.\nThe Polyglot Notebook can be found at:\nhttps://github.com/Fxplorer/Fxplorer_www/blob/main/docs/MinimumFsharpAvaloniaApp.ipynb\nThe .fsx script can be found at:\n#if INTERACTIVE\n\n#r \u0026quot;nuget: Avalonia\u0026quot;\n#r \u0026quot;nuget: Avalonia.Desktop\u0026quot;\n#r \u0026quot;nuget: Avalonia.Themes.Simple\u0026quot;\n\n#endif\n\nInstalled PackagesAvalonia, 11.0.10Avalonia.Desktop, 11.0.10Avalonia.Themes.Simple, 11.0.10\n\nLoading extensions from \u0060/home/linux/.nuget/packages/skiasharp/2.88.7/interactive-extensions/dotnet/SkiaSharp.DotNet.Interactive.dll\u0060\nopen Avalonia\nopen Avalonia.Controls\n\nlet view1 () =\n    Window(Title = \u0026quot;Hello World App\u0026quot;, Content = \u0026quot;Hello World from Avalonia F#!\u0026quot;)\n    \n\ntype App() = \n    inherit Application()\n\n    override this.Initialize() =\n        this.Styles.Add ( Avalonia.Themes.Simple.SimpleTheme() )\n\n    override this.OnFrameworkInitializationCompleted() =\n\n        match this.ApplicationLifetime with\n        | :? Avalonia.Controls.ApplicationLifetimes.IClassicDesktopStyleApplicationLifetime as desktop -\u0026gt;\n            desktop.MainWindow \u0026lt;- view1()\n            printfn \u0026quot;Avalonia app running...\u0026quot;\n        | _ -\u0026gt; ()\n\nlet app = \n    AppBuilder.Configure\u0026lt;App\u0026gt;()\n        .UsePlatformDetect()\n        .StartWithClassicDesktopLifetime([||])\n\nAvalonia app running...\n\n","headings":["Single file minimum F# Avalonia UI app."],"type":"content"},{"uri":"/Fxplorer_www/fsdocs_initial_install.html","title":"Overview\n","content":"Overview\nThe goal of this workbook is to initialize the FSharp.Formatting document creation utility in one\u0027s own repo. The intent is to use FSharp.Formatting to make a blog.\nThis workbook should be placed in the repo root. FSharp.Formatting may be initialized using the dotnet tool utility.\nThe standard setup is to have RepoRoot/docs where all your documentation .md and .fsx, etc files go. fsdocs will search through this directory and create the *.html files in the RepoRoot/output directory. There are customizations that can be set using the docs in the FSharp.Formatting repo. If a docs directoy is needed, run:\nmkdir docs\n\n::note By making the block a PowerShell, it can be executed right in the notebook.\ndotnet tool will error without a \u0022Dotnet local tool manifest file\u0022.\nCreate one:\ndotnet new tool-manifest\n\nThe template \u0022Dotnet local tool manifest file\u0022 was created successfully.\n\nThe basic command to install Fsharp.Formatting is:\ndotnet tool install --local fsdocs-tool\n\nYou can invoke the tool from this directory using the following commands: \u0027dotnet tool run fsdocs\u0027 or \u0027dotnet fsdocs\u0027.\nTool \u0027fsdocs-tool\u0027 (version \u002720.0.0\u0027) was successfully installed. Entry is added to the manifest file /home/linux/CODE/Fxplorer_www/.config/dotnet-tools.json.\n\nfsdocs watch will launch a browser and allow you to browse your created docs. When it launches, it will try to hit index.html and will then 404. One needs to have a index.md or index.fsx file in the docs directy so fsdocs will create the index.html.\nRunning the build command will search through and generate all the html into an RepoRoot/ output directory.\ndotnet fsdocs build\n\nBased on trial and error. The logo is set to /img/logo.png by default. That logo is missing in the inital run. The \u0022input\u0022 directory is the docs by default. So fsdocs will convert to html the files in the directory and parady the structure. It will simply copy over anything it finds that is not a file to process (like .fsx,.md,.ipynb, etc.)\nSolution File\nThe recomendation is a solution file in the root folder. Then any projects in the /src directory.\ndotnet new sln --name Fxplorer_www\n\n::side note\nthe /src has history on why that is used, so it is basically is historical convention.\n:: reference\nhttps://garywoodfine.com/what-is-this-directory-build-props-file-all-about/\n","headings":["Overview","Solution File"],"type":"content"}]